// Title: 動作確認 (Windows編)

#contents


** サンプルコンポーネントの場所

インストールまたはビルドが正常に終了したら、付属のサンプルで動作テストをします。
サンプルは、64bit版の場合、通常は以下の場所にあります。

-C:\Program Files\OpenRTM-aist\2.0.x\Components\C++\Examples
-OpenRTM-aist\examples (ソースからビルドした場合)

以下の手順で、サンプルコンポーネントセットSimpleIOを使用して、OpenRTM-aistが正しくビルド/インストールされているかを確認します。


** サンプル (SimpleIO)を使用した確認

RTコンポーネントConsoleIn、ConsoleOutからなるサンプルセットです。
ConsoleInはコンソールから入力された数値をOutPort から出力するコンポーネント、ConsoleOutはInPortに入力された数値をコンソールに表示するコンポーネントです。これらは簡単なI/O(入出力)を例示するためのサンプルです。
ConsoleInのOutPortからConsoleOutのInPortへ接続し、これらの2つのコンポーネントをアクティブ化(Activate)することで動作します。

以下は、MSIインストーラーでOpenRTM-aistをインストールした環境で、スタートメニューから各種プログラムを起動する前提で説明します。

*** RTSystemEditor、ネームサーバーの起動

以下の手順に従ってRTSystemEditor、ネームサーバーを起動してください。

RTCの操作、RTシステムの構築を行うためのツールRTSystemEditorを起動します。
RTSystemEditorはOpenRTPというツールの中に含まれているため、まずはOpenRTPを起動する必要があります。
デスクトップのショートカットをダブルクリックするか、Windows 10の場合は左下の[ここに入力して検索]に''OpenRTP''と入力して検索結果に表示される[OpenRTP]をクリックして起動してください。

#ref(rtm1.png,60%,center)
CENTER:''デスクトップのショートカット''


#ref(rtm2.png,60%,center)
CENTER:''ここに入力して検索''

// ,/ja/node/6614

**** ワークスペースの選択とEclipseへようこそ
OpenRTPの最初の起動時にはワークスペースとして使用するディレクトリの場所を聞いてきます。それを設定して、今後同じ設定で使い、再度聞かれる必要がない場合は、[この設定をデフォルトとして使用し、今後この質問を表示しない(U)]のチェックボックスをクリックし、チェックの後、[起動]ボタンをクリックしてください。また最初の起動時に[eclipseへようこそ]の画面が開く場合があります。その場合は、左上部の[ようこそ]タブにある[X]ボタンをクリックして閉じてください。

**** RTSystemEditor(RTSE)の起動

OpenRTPの[パースペクティブを開く]ボタンをクリックしてください。

#ref(rtm20_3.png,60%,center)

CENTER:''パースペクティブを開くをクリック''

パースペクティブを開くウィンドウから[RTSystemEditor]を選択して[開く]ボタンをクリックしてください。

#ref(rtm20_4.png,60%,center)
CENTER:''RTSystemEditorの起動''

*** ネームサーバーの起動
まず、コンポーネントの参照を登録するためのネームサーバーを起動します。

#ref(rtm20_5.png,60%,center)
CENTER:''ネームサーバーの起動''

*** Windows Defenderからの警告

ネームサーバーを起動しようとすると、Windows Defenderのファイアウォールにより[Windows セキュリティの重要な警告]ダイアログが表示されることがあります。[パス(H):]のところにOpenRTMのインストールパスのeclipse.exeのパス、例えば''C:Program files\openrtm-aist\2.0.x\utils\openrtp\eclipse.exe''が表示されていることを確認して[プライベート ネットワーク(ホームネットワークや社内ネットワークなど)(R)]にチェックを入れ[パブリックネットワーク(空港、喫茶店など)(非推奨)(U)]のチェックをはずして[アクセスを許可する(A)]をクリックしてください。この画面はWindows 10(build 1909以外だと別のダイアログが表示されることがありますし、設定によっては表示されないこともあります。表示された場合は同様の設定をしてダイアログを閉じてください。また、omniorbに対しても同様のダイアログが表示されることがありますので[アクセスを許可する(A)]をクリックしてアクセスを許可してください。

ネームサーバーの起動に成功するとネームサービスビューに[localhost]と表示されます。

#ref(rtm20_6.png,60%,center)
CENTER:''ネームサーバーの起動を確認''

**** ネームサーバーが起動しない場合

***** omniORBがインストールされていない。

openrtm.orgが提供するMSIインストーラーにはomniORBが含まれていますが、手動でインストールした場合には、omniORBが入っていない場合も考えられますので、omniORBがインストールされているか確認してください。


***** 環境変数OMNI_ROOTが設定されていない

「Start Naming Service」は%RTM_ROOT%\bin\rtm-naming.batにあるバッチファイルからネームサーバー(omniNames.exe)を起動します。
この際、omniNames.exeを参照するために環境変数OMNI_NAMESを利用しています。
通常インストーラーでOpenRTM-aistをインストールした場合には、OMNI_ROOT環境変数が自動で設定されますが、何らかの理由で環境変数が無効になっていたり、手動でインストールした場合などは、環境変数が設定されていないことがあります。

システム環境変数OMNI_ROOTが設定されていることを確認してください。
システム環境変数は以下の手順で参照編集することができます。
- 画面左下部の[ここに入力して検索](虫メガネアイコン）に「システム環境変数」と入力し、表示される[システム環境変数の編集]をクリックする。
- [環境変数(N)...]ボタンをクリックする。

**** その他

ユーザー名が2バイト文字の場合、ログを出力するフォルダーを適切に設定できずにomniNames.exeの起動に失敗する場合があります。
その場合、環境変数TEMPを2バイト文字を含まない場所に設定することで改善する場合があります。
適当なテンポラリディレクトリ(以下のケースではC:\temp)を作り、そこを環境変数TEMPが指すように設定してネームサーバーを起動します。

 set TEMP=C:\temp
 cmd /c rtm-naming.bat



また、まれなケースですが、ホスト名やアドレスの設定の問題で、起動がうまくいかないケースがあります。
その場合、利用しているPCのIPアドレスをomniNames.exeに教えてあげるとうまくいくケースがります。
環境変数OMNIORB_USEHOSTNAMEを以下のように設定します(以下は自ホストのIPアドレスが192.168.0.11の場合の例)。

 set cosnames="omninames"
 set orb="omniORB"
 set port=%1
 set OMNIORB_USEHOSTNAME=192.168.0.11
 set PATH=%PATH%;%OMNI_ROOT%\bin\x86_win32


*** サンプルコンポーネントの起動
ネームサーバー起動後、適当なサンプルコンポーネントを起動します。

Windows 10の場合は右下の[ここに入力して検索]に''C++_Examples''と入力して、サンプルのディレクトリを開きます。

#ref(rtm7.png,60%,center)
CENTER:''ネームサーバーの起動を確認''


#ref(rtm20_8_.png,80%,center)
CENTER:''サンプルコンポーネントディレクトリ''

「ConsoleIn.bat」「ConsoleOut.bat」をそれぞれダブルクリックして2つのコンポーネントを起動します。

** Windows Defenderからの警告

サンプルコンポーネントを起動しようとすると、Windows Defenderのファイアウォールにより[Windows セキュリティの重要な警告]ダイアログが表示されることがあります。[プライベート ネットワーク(ホームネットワークや社内ネットワークなど)(R)]にチェックを入れ[パブリックネットワーク(空港、喫茶店など)(非推奨)(U)]のチェックをはずしてアクセスを許可する(A)]をクリックしてください。このダイアログはWindows 10(build 1903)以外だと別のダイアログが表示されることがありますし、設定によっては表示されないこともあります。表示された場合は同様の設定をしてダイアログを閉じてください。

** サンプルコンポーネント起動後の画面

起動後数秒で下図のような2つのコンソール画面が開きます。

#ref(rtm20_9_.png,60%,center)
CENTER:''ConsoleInコンポーネントとConsoleOutコンポーネント''

**** コンポーネントが起動しない場合

コンポーネントが起動しない場合、いくつかの原因が考えられます。

***** コンソール画面が開いてすぐに消える

環境変数''RTM_VC_VERSION''、''OMNI_ROOT''、''RTM_ROOT''が設定されていないとRTCの起動に失敗します。
MSIインストーラーでインストールした場合はOSを再起動すると解決する場合があります。


また、rtc.confの設定に問題があり、起動できないケースがあります。上記の''C++_Example''を用いて検索したフォルダー下のVCxx(Visual Studio 2019使用時はVC14)にある[rtc.conf]を開いて設定を確認してください。
例えば、corba.endpoint/corba.endpointsなどの設定が現在実行中のPCホストのIPアドレスとミスマッチを起こしている場合などは、CORBAが異常終了します。

以下のような内容(最低限の設定)にrtc.confを書きなおして試してみてください。

 corba.nameservers: localhost


***** ランタイムエラーが出て終了する

ライブラリなどが適切にインストールされていなかったり、設定されていないなどの原因でラインタイムエラーが発生する場合があります。その場合は下記の方法を試してみてください。
-再起動してみる
-OpenRTM-aistをすべてアンインストールし、再度インストールすることで改善される場合があります。

**** RTSystemEditorでのエディタ画面への配置

RTSystemEditorのツリー表示内の[localhost]‘の横の[>]をクリックし、そして&ref(rtm20_icon_db.png,60% );アイコンの横の[>]をクリックすると、先ほど起動した2つのコンポーネントが登録されていることがわかります。

#ref(rtm20_10.png,60%,center)
CENTER:''ConsoleInコンポーネントとConsoleOutコンポーネント''

システムを編集するエディタ(System Diagram)を開きます。上部の[Open New System Editor]ボタン&ref(rtm20_icon_open_editor_ja.png,60%); をクリックすると、中央のペインにエディタ（System Diagram)画面が開きます。

左側のネームサービスビューから&ref(rtm20_icon_rtce.png,60%);のアイコンで表示されているコンポーネント(2つ)を中央のエディタ・エリアにドラッグアンドドロップします。

#ref(rtm20_11.png,50%,center)
CENTER: ''コンポーネントをSystem Diagramに配置''


**** 接続とアクティブ化

ConsoleIn0コンポーネントの右側にはデータが出力されるOutPort &ref(rtse_outport_icon.png, /ja/node/794); が、ConsoleOut0コンポーネントの左側にはデータが入力されるInPort &ref(rtse_inport_icon.png, /ja/node/794);が、それぞれ配置されています。

#ref(rtm20_13.png,80%,center)
CENTER: ''データポートの接続''

これら InPort/OutPort(まとめてデータポートと呼びます)を接続します。OutPortからInPort(またはInPortからOutPort)へドラッグランドドロップすると、図のようなダイアログが現れますので、デフォルト設定のまま[OK]ボタンをクリックします。

#ref(rtm20_12.png,50%,center)
CENTER: ''データポート接続ダイアログ''


2つのコンポーネントの間に接続線が現れます。次に、エディタ上部メニューの[All Activate]ボタン &ref(rtm20_14.png,60%);をクリックし、これらのコンポーネントをアクティブ化します。アクティブ化されると、コンポーネントが緑色に変化します。

#ref(rtm20_15.png,60%,center)
CENTER: ''アクティブ化されたコンポーネント''




コンポーネントがアクティブ化されるとConsoleInコンポーネント側のコンソール上の表示が

 Please input number: 

というプロンプト表示に変わりますので、適当な数値(short int の範囲内:32767以下)を入力しEnterキーを押してください。
すると、ConsoleOut側のコンソール画面にも入力した数値が表示され、ConsoleInコンポーネントからConsoleOutコンポーネントへデータが転送されたことがわかります。

以上で、コンポーネントの基本動作の確認は終了です。


** 他のサンプル

インストーラーには、このほかにもいくつかのサンプルコンポーネントが付属しています。これらのコンポーネントも同様に、ダブルクリックで起動、そしてRTSystemEditorを用いてポート間を接続し、アクティブ化することで試すことができます。

付属しているコンポーネント起動用バッチファイルのリストと簡単な説明を以下に示します。

|LEFT:30|LEFT:80|c
|ConsoleIn.bat|LEFT:コンソールから入力された数値をOutPortから出力する&color(default){ConsoleInコンポーネント}; を起動します。ConsoleOutに接続して使用します。|
|ConsoleOut.bat|InPortに入力された数値をコンソールに表示する&color(default){ConsoleOutコンポーネント};  を起動します。ConsoleInに接続して使用します。|
|SeqIn.bat|ランダムな数値(Short、Long、Float、Doubleとそのシーケンス型)を出力する&color(default){SequenceInComponentコンポーネント};を起動します。SequenceOutComponentに接続して使用する。|
|SeqOut.bat|InPortに入力される数値(Short、Long、Float、Doubleとそのシーケンス型)を表示する&color(default){SequenceOutComponent};を起動します。SequenceInComponentに接続して使用します。|
|MyServiceProviderComp.bat|MyService型のサービスを提供する&color(default){MyServiceProviderコンポーネント}; を起動します。MyServiceConsumerに接続して使用します。|
|MyServiceConsumerComp.bat|MyService型のサービスを提供する&color(default){MyServiceConsumerコンポーネント}; を起動します。MyServiceProviderに接続して使用します。|
|ConfigSample.bat|Configuration機能の使用例のサンプル&color(default){ConfigSampleコンポーネント}; を起動します。RtcLinkからConfigurationを変更してConfigurationの挙動を理解するためのサンプルです。|
|Composite.bat|複合コンポーネント作成サンプル&color(default){PeriodicECSharedComponentコンポーネント}; を起動します。Sensor、Controller、Motorの3つサブ・コンポネントを複合しています。 ConsoleInなどのコンポーネント接続して使ってみると良いでしょう。|


