// Title: rtc.conf設定項目一覧
 // Title: rtc.conf設定項目一覧
#contents(3)


//============================================================
** 一般的な設定
//============================================================

*** config.version
内部で自動的に設定されるコンフィギュレーションファイルのバージョン。通常、OpenRTM-aistのバージョンと同じ。
rtc.conf内で指定する必要はなく、読みだすことでOpenRTM-aistが想定するrtc.confのバージョンがわかる。

- 指定: Read-only、任意(指定しても影響なし)
- デフォルト値: 現在のOpenRTM-aistのconfigバージョン
- 例:
 config.version: 2.0

*** openrtm.name
内部で自動的に設定されるっバージョン番号付きOpenRTM-aistのフルネーム。
rtc.conf内で指定する必要はなく、読みだすことでバージョン番号付きのOpenRTM-aist名称がわかる。

- 指定：Read-only、指定しても影響なし
- デフォルト値：現在のバージョン付きOpenRTM-aist名
- 例:
 openrtm.name: OpenRTM-aist-2.0.0

*** openrtm.version
内部で自動的に設定されるOpenRTM-aist のバージョン。
rtc.conf内で指定する必要はなく、読みだすことでOpenRTM-aistのバージョンがわかる。

- 指定：Read-only、指定しても影響なし
- デフォルト値：現在のOpenRTM-aistのバージョン
- 例:
 openrtm.version: 2.0.0

//============================================================
** manager の基本設定
//============================================================

*** manger.name

'''manager.name''' はマネージャーのマスター・スレーブのグルーイングに使われる文字列化されたCORBAオブジェクト名に利用される。
'''manager.name'''が'''manager'''設定された場合、マスターマネージャは以下の文字列化されたオブジェクト参照で指定される。

 corbaloc::<hostname>:2810/manager 

スレーブマネージャは以下の文字列で指定することができる。

 corbaloc::<hostname>:<port_number>/manager 

- 指定: Read/Write, マネージャ名を特定する任意の名前
- デフォルト値: manager
- 例:
 manager.name: manager

*** manger.instance_name

この '''manager.instance_name''' は、ネーミングサービス登録時のマネージャーの名前に使用される。
通常、マスターマネージャーの参照は、'''manager|mgr'''という名前のネームサーバーに登録される。
このオプションが「foobar」に設定されている場合、登録されたマスターマネージャー名は '''foobar|mgr''' になります。

- 指定: Read/Write, ネームサーバ等に登録可能な任意の名前
- デフォルト値: manager
- 例:
 manager.name: manager


*** manger.naming_formats

マネージャをネームサーバに登録する際のフォーマットを指定する。名前と名前の間のデリミタは '''/'''、名前とKindの間のデリミタは '''.''' で指定する。
 
以下の''%''で始まる指定子を利用することができる。

| 指定子 | 意味               |
| %n | マネージャ名           |
| %h | ホスト名               |
| %M | マネージャ名           |
| %p | マネージャのプロセスID |

- 指定: Read/Write, <name>.<kind>/<name>.<kind>/...
- デフォルト値: %h.host_cxt/%n.mgr
- 例:
 manager.naming_formats: %h.host_cxt/%n.mgr

*** manager.is_master

当該プロセスをマスターマネージャにするかどうか？コマンドラインオプショ
ン ''-d'' を指定すると、この値が NO に設定されていてもマスターマネージャ
になる。

- 指定: ''YES'' or ''NO''
- デフォルト値: NO
- 例:
 manager.is_master: NO

*** manager.corba_servant

マネージャのCORBAサーバントを起動するかどうかの設定。YES を設定すると、
マネージャのCORBAサーバントが起動するため、リモートからマネージャの操作
が可能になる。NO の場合には、CORBAサーバントが起動しないため、マネージャ
のCORBA経由での操作はできなくなる。

- 指定: ''YES'' or ''NO''
- デフォルト値: YES
- 例:
 manager.corba_servant: YES

*** corba.master_manager

このオプションは、スレーブマネージャーが使用するマスターマネージャーのアドレスとポート番号を指定する。 スレーブマネージャーは、ここで指定されたマスターマネージャーを自身のマスターマネージャーとして想定し、起動時にマスターマネージャーにアクセスし、ネゴシエーションを実行します。 マスターマネージャーによって直接起動されないスレーブマネージャーとスタンドアロンコンポーネントは、このオプションで指定されたマスターマネージャーによって管理される。

- 指定: <host_name>:<port>
- デフォルト: localhost:2810
- 例:
 corba.master_manager: localhost:2810

//============================================================
** managerのライフサイクルに関するオプション
//============================================================

*** manager.shutdown_on_nortcs:

プロセス上にRTCが一つもなくなった場合、すなわち同一プロセス上のRTCの最
後の1つが終了した場合に、マネージャをシャットダウンし当該プロセスを終了
させるかどうかを指定する。YES の場合には、RTCが一つもなくなった時点でプ
ロセスが終了する。NOの場合は、RTCが一つもない状態でもマネージャ、プロセ
スともに動き続ける。

- 指定: ''YES'' or ''NO''
- デフォルト: YES
- 例:
 manager.shutdown_on_nortcs: YES

*** manager.shutdown_auto

プロセス内のRTCの有無を一定時間ごとに調べ、RTCがない場合には、マネージャ
およびプロセスをシャットダウンするかどうかを設定する。YESの場合、RTCが
一つもなければ、マネージャおよびプロセスは自動的にシャットダウンされる。
NOの場合、RTCが一つもなくともマネージャおよびプロセスが動作し続ける。

manager.shutdown_on_nortcs との違いは、シャットダウンのトリガが、
manager.shutdown_on_nortcs ではRTCの削除であるのに対して、
manager.shutdown_auto は時間となっている点である。
- 指定: ''YES'' or ''NO''
- デフォルト: YES
- 例:
 manager.shutdown_auto: YES

*** manager.auto_shutdown_duration

プロセス内のRTCの有無調べる周期。単位は秒。上記の manager.shutdown_auto が
YESに設定されている場合、このオプションで設定された周期でRTCの有無を確認
しにいく。

- 指定: 数値 (単位[s])
- デフォルト: 10.0
- 例:
 manager.auto_shutdown_duration: 10.0

*** manager.termination_waittime

このオプションは、マネージャに対する終了要求後から、実際の終了スレッドが実行を始めるまでの時間を指定する。
通常は変更する必要はない。ただし、CORBAの終了処理が正常に終了する前に他の終了処理が実行され例外などが出る場合は、この時間を調整することで解決することがある。


//============================================================
** サポート言語設定
//============================================================

*** manager.supported_languages

マスターマネージャは、リモートアプリケーションなどからの要求に応じて、スレーブマネージャおよびRTCを起動する。スレーブマネージャは、C++言語版だけでなく、Java版、Python版などの可能性もある。このオプションでは、マスターマネージャがサポートする言語を設定する。
ここで指定される言語名称は、以下の "manager.modules.<language>.manager_cmd" 等のオプション指定に利用される。
例えば、仮にこのオプションに "Lua" が指定されると、

-  manager.modules.Lua.manager_cmd
-  manager.modules.Lua.profile_cmd
-  manager.modules.Lua.suffixes
-  manager.modules.Lua.load_paths

といったオプションが有効となり、これらのオプションパラメータも正しく指定されると、マスターからLua言語のスレーブマネージャとLua版のRTCを起動することができるようになる。
(現状 Lua 版はこれらの機能をサポートしていない。)

- 指定: C++, Java, Python 等の言語をカンマ区切りで指定
- デフォルト: C++, Java, Python
- 例:
 manager.supported_languages: C++, Python, Java


*** manager.modules.<lang>.suffixes

言語ごとのRTCモジュールの拡張子。
このオプションはローダブルモジュールRTCの拡張子を指定する。

 manager.modules.<lang>.suffixes

の<lang>の部分は、manager.supported_languages で指定されたものである必要がある。
'''.'''(ドット）は不要である。C++, Python/Python3およびJava言語それぞれに適切な拡張子が指定されるので、通常は設定不要である。

- 指定: ローダブルモジュールの拡張子名
- デフォルト:
-- C++: Windows: dll, Linux等: so, Mac OS X: dylib
-- Python/Python3: py
-- Java: class
-例
 manager.modules.C++.suffixes: dll
 manager.modules.Python.suffixes: so
 manager.modules.Java.suffixes: class


*** manager.modules.<lang>.manager_cmd

言語ごとのマネージャプログラム名。
このオプションは、言語ごとのマネージャ実行ファイル名を指定する。
マスターマネージャに対してRTCの生成を依頼すると、スレーブマネージャを実行しそのプロセス上でRTCのインスタンス化が行われる。
C++版RTCはC++版のマネージャ (rtcd)、Python版RTCはPython版のマネージャ (rtcd_python) が利用される。
指定される実行ファイル名にはコマンドサーチパスが通っている必要がある。

- 指定: マネージャのコマンド名
- デフォルト:
-- C++: rtcd
-- Python: rtcd_python
-- Python3: rtcd_python3
-- Java: rtc_java
-例
 manager.modules.C++.manager_cmd: rtcd
 manager.modules.Python.manager_cmd: rtcd_python
 manager.modules.Java.manager_cmd: rtcd_java

*** manager.modules.<lang>.profile_cmd

言語ごとのプロファイル取得コマンド名。

- 指定: プロファイル取得コマンド名
- デフォルト:
-- C++: rtcprof
-- Python: rtcprof_python
-- Java: rtc_java
-例
 manager.modules.C++.profile_cmd: rtcprof
 manager.modules.Python.profile_cmd: rtcprof_python
 manager.modules.Java.profile_cmd: rtcprof_java

*** manager.modules.<lang>.load_paths

言語ごとのRTCモジュールロードパス。

- 指定: RTCモジュールロードパス。
- デフォルト:
-- C++: ./
-- Python: ./
-- Java: ./
-例
 manager.modules.C++.profile_cmd: ./, /usr/share/OpenRTM-aist/components/cxx

//============================================================
** モジュール管理に関する設定
//============================================================

*** manager.modules.load_path

マネージャはこのオプションで指定されたサーチパスリストからモジュールを
探索する。パスはカンマ区切りで列挙する。パスのデリミタは、UNIXでは
''/''、Windows ''\\''である。

- 指定: /dir_name0/dir_name1/..., /dir_name0/dir_name1/...
- デフォルト値: ./
- 例:
 manager.modules.load_path: C:/Program Files/OpenRTM-aist,  \
                            C:\\Program Files\\OpenRTM-aist
 manager.modules.load_path: /usr/lib, /usr/local/lib,       \
                            /usr/local/lib/OpenRTM-aist/libs

*** manager.modules.preload:

マネージャは起動時に予めローダブルモジュールをロードすることができる。
このオプションで指定されたローダブルモジュール
を、''manager.modules.load_path'' で指定されたサーチパスから探し出す。
もし、''manager.modules.abs_path_allowed'' で YES が指定されていれば、
ローダブルモジュールを絶対パスで指定することもできる。

モジュール初期化関数名は通常、モジュールファイル名から '''<module_base_name>Init'' のような名前で推定される。 モジュールファイル名がConsoleIn.soの場合、初期化関数名は「ConsleInInit」に設定される。 初期化関数名を指定したい場合は、「Hoge.so（ConsoleInInit）」のように、モジュールファイル名の後の括弧内の初期化関数名を指定できる。 「.so」、「。dll」、「。dylib」などのファイル拡張子は削除できる。 ファイル拡張子のないモジュールファイル名を指定した場合、プロパティ変数「manager.modules.C ++。suffixes」で指定した拡張子が付与される。

- 指定: <module_name>(.<extention>) (init_func_name), ...
- デフォルト値: 空
- 例:
 manager.modules.preload: ConsoleIn.dll, ConsoleOut.dll
 manager.modules.preload: ConsoleIn.so, ConsoleOut.so
 
 manager.modules.abs_path_allowed: YES
 manager.modules.preload: /usr/lib/OpenRTM-aist/ConsoleIn.so

*** manager.modules.abs_path_allowed

モジュールの絶対パス指定許可フラグ。もしこのオプションがYESの場合、モジュールの絶対パス指定が許可される。
このオプションが "YES"の場合、モジュールの絶対パス指定が許可される。 セキュリティ上の理由から、絶対パスでロードするモジュールを指定することは、デフォルトでは許可されていない。 ロードするモジュールは、指定したディレクトリにデプロイする必要がある。 開発およびデバッグ段階でロードされたモジュールを絶対パスで指定する場合は、このオプションを使用することができる。

- 指定: ''YES'' or ''NO''
- デフォルト値: NO
- 例:
manager.modules.abs_path_allowed: YES


*** manager.modules.search_auto

このオプションはRTCのローダブルモジュールの自動検索を行うかどうかを指定する。
このオプションがYESに設定されている場合、RTC生成がマネージャに対して要求された時に、モジュールサーチパスから自動的に対象となるRTCのローダブルモジュール (DLL, so等) を探しロードし、コンポーネントの生成をする。
NOの場合、生成対象のRTCはあらかじめロードしておかなければならない。

- 指定: Read/Write, YES/NO
- デフォルト: YES
- 例:
 manager.modules.search_auto: YES


*** manager.preload.modules:

このオプションはCORBAの初期化前にロードするモジュールを指定する。
ある種の機能を実装したローダブルモジュールは、CORBAの初期化前にロードする必要があり、そのようなモジュールはこのオプションで指定する。
モジュールの指定方法は、manager.modules.preload と同じである。

- 指定: <module_name>(.<extention>) (init_func_name), ...
- デフォルト値: 空
- 例:
manager.preload.modules: SSLTransport.dll
manager.preload.modules: SSLTransport.py
manager.preload.modules: SSLTransport
manager.preload.modules: C:\\Python27\\Lib\\site-packages\\OpenRTM_aist\\ext\\SSLTransport

// #
// # The following options are not implemented yet. 
// #
// # manager.modules.config_ext:
// # manager.modules.config_path:
// # manager.modules.detect_loadable:
// # manager.modules.init_func_suffix:
// # manager.modules.init_func_prefix:
// # manager.modules.download_allowed:
// # manager.modules.download_dir:
// # manager.modules.download_cleanup:
// #


//============================================================
** 一般的機能
//============================================================
*** manager.cpu_affinity

このオプションは、マネージャのプロセスを特定のCPUにバインドする。
オプション引数は、カンマで区切られた1つ以上のCPU IDでなければならない。
CPU IDは0から始まり、最大値はCPUコア数-1となる。
もし不正なCPU IDが指定された場合、このプロセスはすべてのCPUを利用するよう設定される。

- 指定: バインドするCPU IDをカンマ区切りで指定
- デフォルト: なし
- 例:
 manager.cpu_affinity: 0,1

*** manager.components.naming_policy

このオプションはコンポーネントに対する名前付け(番号付け)ポリシーを指定する。
RTCは通常、インスタンスが生成されるとコンポーネント型名 (type_name)に番号を付加した以下のような名前が順に付けられる。

 <type_name><number>
 ex. ConsoleOut0, ConsoleOut1, ConsoleOut2, ...

デフォルトでは、同一プロセス内の同一型のコンポーネントで順に0から番号が付与されるため、別のプロセスや別のノード(コンピュータ)上で生成されたRTCも同一の名前となる場合がある。
ネームサーバ上にそれらのRTCが登録される場合、同一パス・同一名称のRTCの場合は、互いにオブジェクト参照を上書きしあうので、正しい希望のRTCにアクセスできなくなるため、ノード毎に一意の番号を付ける "node_unique"、　ネームサーバ上で一位の番号を付ける "ns_unique" という2つのポリシーが用意されている。

指定可能なオプションはデフォルトでは以下の3つである。

- process_unique: プロセス内で一意の名前を付ける
- node_unique: ノード内で一意の名前を付ける
- ns_unique: ネームサービス上で一意の名前を付ける

なお、ポリシーは独自に拡張することもできる。

- 指定: Read/Write, {process_unique, node_unique, ns_unique}
- デフォルト: process_unique
- 例:
 manager.components.naming_policy: ns_unique



*** manager.components.precreate

このオプションはマネージャのスタート時に起動するコンポーネント名 (モジュール名) を指定する。ここで指定されるコンポーネントのファクトリは manager.module.preload または、マネージャに静的にリンクするなどして、登録されている必要がある。

- 指定: <module_name>, <module_name>, ...
- デフォルト値: 空
- 例:
 manager.components.precreate: ConsoleIn, ConsoleOut, SeqIn, SeqOut

*** manager.components.preconnect

# Advance connection creation
#
# This option specifies connections to be created in advance before
# starting the manager's event-loop. The target components and ports
# must be created previously by manager.components.precreate optinos.
# A port is specified as XXX format, and a connection is specified by
# a delimiter XX between ports such as ConsoleIn.out:ConsoleOut.in. A
# connector profile is specified in the following parentheses "()" by
# "key=falue" format with "&" delimiter.

このオプションは、マネージャのイベントループを開始する前に作成するコネクタを指定する。 
ターゲットコンポーネントとポートは、"manager.components.precreate" オプションによって事前に作成されている必要がある。 
ポートは '''<comp0>.<port0>?port=<comp1>.<port1>&<option_key>=<option_value>&...''' のような形式で指定される。
もし、データフローやインターフェースタイプが指定されない場合は、dataflow_type=push, interface_type=corba_cdr が自動で指定される。

- 指定: <comp0>.<port0>?port=<comp1>.<port1>&<option_key>=<option_value>&...
- デフォルト値: 空
- 例：
 manager.components.preconnect: ConsoleIn.out?port=ConsoleOut.in&dataflow_type=push&interface_type=corba_cdr, SeqIn.octet?port=SeqOut.octet&dataflow_type=push&interface_type=direct
manager.components.preconnect: 



//------------------------------------------------------------
** CORBAに関する設定

*** corba.args

CORBAに与える引数を指定する。CORBA は実装毎に異なるコマンドラインオプショ
ンを持つ。通常コマンドライン引数は、CORBA の API である ORB_init() 関数
に与えられるが、このオプションは指定された文字列をこの ORB_init() 関数
に渡す。



- 指定: 文字列
- デフォルト: 空文字列
- 例:
 corba.args: -ORBInitialHost myhost -ORBInitialPort 8888

**** 指定例1

画像データなどをデータポートで送る際、1回に送信するデータサイズ約2MBを超える場合には注意が必要。
omniORBでは、giop(General Inter-ORB Protocol)で扱えるサイズはデフォルトで"2097152B(2MB)"であり
このサイズを超えるデータを送ろうとすると、giopの制限のため正しいデータを送ることができない。
corba.args オプションを利用して、最大サイズを変更することが可能である。この指定は、OutPort、InPort両方にて指定する必要がある。

 corba.args: -ORBgiopMaxMsgSize 3145728 # この行を追加
                                        # Maxサイズを3Mに指定

なお、corba.args に指定する以外に、環境変数を以下のように指定することでこの制限を緩和することができる。

  export ORBgiopMaxMsgSize=3145728

- （参考）(omniORB configuration and API) http://omniorb.sourceforge.net/omni41/omniORB/omniORB004.html


*** corba.endpoint:

CORBAにおいては、リモートのオブジェクトのIORと呼ばれる参照によりアクセ
スするが、IORには当該オブジェクトが動作するノードのアドレスとポート番号
が通常1セットのみ記述されている。OpenRTMが動作しているノードに2つ以上の
ネットワークインターフェースが存在する場合、IORに含まれるノードのアドレ
スとして意図しないアドレスが割り振られる場合がある。

これを解消するために、本オプションでCORBAで利用するネットワークのアドレ
スを指定することができる。''ホストアドレス:ポート番号'' として指定するが、ポート番号は省略できる。ただし、'':(コロン)''は省略できない。

- 指定: <host_addr>:<port>
- デフォルト: 空文字
- 例:
 corba.endpoint: 192.168.0.45:
 corba.endpoint: 192.168.0.45:8776
 corba.endpoints: myhost:      (use myhost and default port)
 corba.endpoints: :9876        (use default addr and port 9876)
 corba.endpoints: myhost:9876  (use myhost and port 9876)


*** corba.endpoints

corba.endpoint のエンドポイントを複数指定することがきるオプション。ORB
の実装によっては、IORに複数のアドレスを含めることができる。ただし、
Java標準のCORBAであるJavaIDLにおいては、複数のアドレスを指定したIOR経由
で当該オブジェクトにアクセスする場合、動作が遅くなるなど問題も報告され
ているので注意が必要である。

''アドレス:ポート'' の対を '',(カンマ)''で区切り複数指定することができ
る。特別な文字列として ''all'' を指定することで、ノードのすべてのアドレ
スをIORに含めることもできる。

- 指定: <host_addr>:<port>, <host_addr>:<port>, ... または all
- デフォルト: 空文字
- 例:
 corba.endpoints: 192.168.1.10:1111, 192.168.10.11:2222
 corba.endpoints: 192.168.1.10, 192.168.10.11
 corba.endpoints: all

corba.endpoints:

*** corba.nameservers

RTC等を登録するネームサーバを指定するオプション。カンマ区切りで複数のネー
ムサーバを指定することができる。指定したアドレスおよびポート番号にネー
ムサーバがない場合でも特にエラーにはならず、存在するネームサーバにのみ
RTCの名前を登録する。

- 指定: <host_addr>:<port>, <host_addr>:<port>, ...
- デフォルト: localhost
- 例:
 corba.nameservers: openrtm.aist.go.jp:9876
 corba.nameservers: rtm0.aist.go.jp, rtm1.aist.go.jp, rtm2.aist.go.jp
 corba.nameservers: localhost

*** corba.nameservice.replace_endpoint

ノードに複数のNICが存在する場合、ネームサーバ上に登録されるRTCのIORに含
まれるアドレスが、適切でない場合が存在する。例えば、あるノードが
192.168.0.10と192.168.1.10という2つのアドレスを持ち、192.168.0.1 および
192.168.1.1 に存在する2つのネームサーバ上に登録される場合、仮に
192.168.0.10 が当該ノードでデフォルトで利用されるネットワークインター
フェースだとすると、上記2つのネームサーバネームサーバに登録されるIORには、
192.168.0.10 のみが含まれる。このとき、192.168.1.0 のネットワークではネームサーバ上のIORは到達不可能なアドレスが記載された無意味なものとなる。

このオプションを指定すると、上記のケースのような場合、192.168.1.1 のネー
ムサーバに登録されるIORのアドレスを 192.168.1.10 に置き換える。

ただし、このオプション指定することによって、192.168.1.0 ネットワーク上
の他のノードからは、当該RTCのプロファイル等を利用することはできるが、ポー
トの接続等は行うことはできない。

- 指定: ''YES'' or ''NO''
- デフォルト: NO
- 例:
 corba.nameservice.replace_endpoint: NO


*** corba.alternate_iiop_addresses

このオプションは、代替IIOPアドレスをIORプロファイルに追加します。
IORにはサーバント(CORBAオブジェクトのサーバ)の追加のエンドポイント
を含めることができます。これは、"corba.endpoints"オプションとほぼ
同等ですが、実際にエンドポイントを作成しない点が異なります。
("corba.endpoints" オプションでは実際のエンドポイントを作ろうとし、
できなければエラーが返されます。) このオプションは単に代替のIIOPエ
ンドポイントアドレス情報をIORに追加します。

このオプションは、RTCをNATやルータの内部に配置する場合に使用します。
一般的には、プライベートネットワーク内のRTCはグローバルネットワー
ク上のRTCを接続することはできません。しかしながら、NATやルータのポー
トフォワーディングが適切に設定されていればグローバル側のRTCはプライ
ベートネットワークのRTCに接続することが可能です。

設定は以下のように行います。

+ NATやルータのポートフォワーディングを適切に設定します。
-- ここでは、グローバル側のポート2810をプライベート側のあるアドレ
スの2810へ転送するように設定します。
+ プライベート側のRTCのrtc.confを以下のように設定します。
  corba.nameservers: my.global.nameserver.com <- グローバル側のネームサーバを設定
  corba.endpoints: :2810 <- コンポーネントのポート番号
  corba.alternate_iiop_addresses: w.x.y.z:2810 <- ルータのグローバル側のIPアドレスとポート番号
+ グローバル側のRTCとプライベート側のRTCを起動

なお、RTSystemEditorでは、プライベート側のRTCへのアクセスが極端に
遅くなる場合があります。これはJavaのIOR追加プロファイル機能の実装
が十分でないため、プライベート側に到達するのに時間がかかるためと考
えられます。rtshellなどを利用すると、接続にかかる時間を減らすこと
ができます。また、RTSystemEditorやrtshellでの接続に時間がかかった
場合でも、一旦接続したポート間の通信速度は通常とほとんど変わりませ
ん。

- 指定: address:port
- デフォルト: 未指定
- 例:
 corba.alternate_iiop_addresses: addr:port


//------------------------------------------------------------
** ネームサービスに関する設定

*** naming.enable

このオプションはネーミングサービスに関する機能の有効・無効を切り替える。
YESを指定した場合、ネームサービスへRTCの参照を登録する。NOの場合、ネー
ムサービスへのRTCの参照の登録は行われない。

- 指定: ''YES'' or ''NO''
- デフォルト値: YES
- 例:
 manager.is_master: NO

*** naming.type

このオプションはネームサービスのタイプを指定する。現在のところはcorbaの
みをサポートしている。
- 指定: ネームサービスのタイプ
- デフォルト値: corba
- 例:
 naming.type: corba

*** naming.formats

RTCをネームサーバに登録する際のフォーマットを指定する。以下の ''%''で始
まる指定子を利用することができる。名前階層のデリミタは ''/'' であり、名
前と種類(kind)のデリミタは ''.'' である。

| %n | RTCのインスタンス名 |
| %t | RTCのタイプ名 |
| %m | RTCのモジュール名 |
| %v | RTCのバージョン |
| %V | RTCのベンダ名 |
| %c | RTCのカテゴリ名 |
| %h | ホスト名 |
| %M | マネージャ名 |
| %p | プロセスID |

- 指定: /<name>.<kind>/<name>.<kind>/...
- デフォルト値: %h.host_cxt/%n.mgr
- 例:
 naming.formats: %h.host/%n.rtc

*** naming.update.enable

RTCのネームサーバへの登録は通常インスタンス生成時に行われる。したがって、
RTCの生成以降に起動されたネームサーバには、当該RTCの名前と参照は登録さ
れない。このオプションを指定することで、定期的にネームサーバを確認し、
ネームサーバの起動が確認された場合、改めて名前と参照を登録する。

- 指定: ''YES'' or ''NO''
- デフォルト値: YES
- 例:
 naming.update.enable: YES

*** naming.update.interval

naming.update.enable が YES の場合、ネームサーバの確認および再登録を行
う周期を指定する。

- 指定: 登録周期を [s] で指定する。
- デフォルト値: 10.0
- 例:
 naming.update.interval: 10.0

*** naming.update.rebind

このオプションに YES を指定すると、すでに名前と参照が登録されているネー
ムサーバ上で名前が削除されるなどした場合にもの、再度登録を行う。

- 指定: ''YES'' or ''NO''
- デフォルト値: NO
- 例:
 naming.update.rebind: NO



//============================================================
// Logger configurations
//============================================================

** ロガー関係の設定

*** logger.enable

ロガーの有効化・無効化の指定。

- 指定: ''YES'' or ''NO''
- デフォルト値: YES
- 例:
 logger.enable: YES

*** logger.file_name

ログファイル名の指定。カンマ区切りで複数のファイルへ出力することもでき
る。プロセスIDを置き換える指定子 %p が利用可能。また、ファイル名
''stdout'' とするとログを標準出力する。

- 指定: パスを含むファイル名
- デフォルト値: ./rtc%p.log
- 例:
 logger.file_name: /tmp/rtc%p.log
 logger.file_name: /tmp/rtc%p.log, stdout

*** logger.date_format

ログに記載する日付・時刻のフォーマット指定。以下の strftime(3) に似た
フォーマット指定子を利用可能。時刻を指定しない場合、''No'' または
''Disable'' を指定する。

| %a | abbreviated weekday name |
| %A | full weekday name |
| %b | abbreviated month name |
| %B | full month name |
| %c | the standard date and time string |
| %d | day of the month, as a number (1-31) |
| %H | hour, 24 hour format (0-23) |
| %I | hour, 12 hour format (1-12) |
| %j | day of the year, as a number (1-366) |
| %m | month as a number (1-12). &br; Note: some versions of Microsoft Visual C++ may use values that range from 0-11. |
| %M | minute as a number (0-59) |
| %p | locale's equivalent of AM or PM |
| %S | second as a number (0-59) |
| %U | week of the year, sunday as the first day |
| %w | weekday as a decimal (0-6, sunday=0) |
| %W | week of the year, monday as the first day |
| %x | standard date string |
| %X | standard time string |
| %y | year in decimal, without the century (0-99) |
| %Y | year in decimal, with the century |
| %Z | time zone name |
| %% | a percent sign |

- 指定: /<name>.<kind>/<name>.<kind>/...
- デフォルト値: %b %d %H:%M:%S
- 例:
 logger.date_format: No
 logger.date_format: Disable
 logger.date_format: [%Y-%m-%dT%H.%M.%S%Z]     // W3C standard format
 logger.date_format: [%b %d %H:%M:%S]          // Syslog format
 logger.date_format: [%a %b %d %Y %H:%M:%S %Z] // RFC2822 format
 logger.date_format: [%a %b %d %H:%M:%S %Z %Y] // data command format
 logger.date_format: [%Y-%m-%d %H.%M.%S]

*** logger.log_level

以下のログレベルを指定可能。

- SILENT
- ERROR
- WARN
//- NORMAL
- INFO
- DEBUG
- TRACE
- VERBOSE
- PARANOID

書くログレベルを指定した際に実際にログに記録されるログメッセージのレベ
ルは以下の通り。

| SILENT   | completely silent |
| ERROR    | includes (ERROR) |
| WARN     | includes (ERROR, WARN) |
| INFO     | includes (ERROR, WARN, INFO) |
//| NORMAL   | includes (ERROR, WARN, INFO, NORMAL) |
| DEBUG    | includes (ERROR, WARN, INFO, DEBUG) |
| TRACE    | includes (ERROR, WARN, INFO, DEBUG, TRACE) |
| VERBOSE  | includes (ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE) |
| PARANOID | includes (ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARA) |
//| DEBUG    | includes (ERROR, WARN, INFO, NORMAL, DEBUG) |
//| TRACE    | includes (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE) |
//| VERBOSE  | includes (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE) |
//| PARANOID | includes (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE, PARA) |

''TRACE'', ''VERBOSE'', ''PARANOID'' の各ログレベルは通常巨大なログファイルを生成します。''PARANOID''を指定すると、ログフォーマットが崩れる場合があります。

- 指定: (SILENT|ERROR|WARN|INFO|DEBUG|TRACE|VERBOSE|PARANOID)
//- 指定: (SILENT|ERROR|WARN|NORMAL|INFO|DEBUG|TRACE|VERBOSE|PARANOID)
- デフォルト値: INFO
//- デフォルト値: NORMAL
- 例:
 logger.log_level: DEBUG

//============================================================
// Timer configuration
//============================================================

** タイマに関する設定

*** timer.enable

タイマ機能を有効/無効にする。タイマを無効にするとタイマを利用している機
能、例えばネームサーバの定期的確認と再登録等が無効になる。

- 指定: ''YES'' or ''NO''
- デフォルト値: YES
- 例:
 timer.enable: YES

*** timer.tick

タイマの精度を指定する。

- 指定: タイマの精度を [s] で指定する。
- デフォルト値: 0.1 [s], (= 100ms)
- 例:
 timer.tick: 1.0

//============================================================
// Execution context settings
//============================================================

*** exec_cxt.periodic.type

デフォルトの実行コンテキストのタイプ。

- 指定: デフォルトの実行コンテキスト名
- デフォルト値: PeriodicExecutionContext
- 例:
 exec_cxt.periodic.type: PeriodicExecutionContext
 exec_cxt.periodic.type: ArtExecutionContext

*** exec_cxt.periodic.rate

デフォルトの実行コンテキストの周期。

- 指定: デフォルトの実行コンテキスト周期を [Hz] で指定する
- デフォルト値: 1000
- 例:
 exec_cxt.periodic.rate: 100
 
