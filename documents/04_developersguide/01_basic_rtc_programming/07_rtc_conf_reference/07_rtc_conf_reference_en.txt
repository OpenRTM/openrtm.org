// Title: rtc.conf setting item list
#contents(3)

//------------------------------------------------------------=============
** General settings
//** 一般的な設定

*** config.version
Version of the configuration file.
//コンフィギュレーションファイルのバージョン。
- Example:
//- 例:
 config.version: 1.0

*** openrtm.version
Version of OpenRTM-aist.
//OpenRTM-aist のバージョン。
- Example:
//- 例:
 openrtm.version: 1.0.0

//------------------------------------------------------------
** Settings related to manager
//** manager に関する設定

*** manger.name

Name of manager. When a manager is registered with a name server, it is registered with the name set here.
//managerの名前。マネージャがネームサーバで登録される際には、ここで設定し
//た名前で登録される。

- Designation: Any name that can be registered in a name server etc.
- Default value: manager
- Example:
//- 指定: ネームサーバ等に登録可能な任意の名前
//- デフォルト値: manager
//- 例:
 manager.name: manager

*** maanger_naming_formats

Specify the format for registering the manager in the name server. below
You can use specifiers that begin with ''% ''.
//マネージャをネームサーバに登録する際のフォーマットを指定する。以下の
//''%''で始まる指定子を利用することができる。

| Specifier | meaning |
|%n | Manager name |
|%h | Host name |
|%M | Manager name |
|%p | Manager process ID |
//| 指定子 | 意味               |
//| %n | マネージャ名           |
//| %h | ホスト名               |
//| %M | マネージャ名           |
//| %p | マネージャのプロセスID |

- Specification:/<name>.<Kind>/<name>.<Kind>/...
- Default value:% h.host_cxt /%n.mgr
- Example:
//- 指定: /<name>.<kind>/<name>.<kind>/...
//- デフォルト値: %h.host_cxt/%n.mgr
//- 例:
 manager.name: %h.host_cxt/%n.mgr

*** manager.is_master

Whether or not to make this process master manager? Command line option
If you specify '' - d '', even if this value is set to NO, it becomes the master manager.
//当該プロセスをマスターマネージャにするかどうか？コマンドラインオプショ
//ン ''-d'' を指定すると、この値が NO に設定されていてもマスターマネージャ
//になる。

- Designation: ''YES'' or ''NO''
- Default value:
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト値: NO
//- 例:
 manager.is_master: NO

*** manager.corba_servant

Setting whether to activate manager 's CORBA servant. If you set YES, the manager's CORBA servant will start, so you can operate the manager remotely. In the case of NO, since the CORBA servant is not activated, it is impossible for the manager to operate via CORBA.
//マネージャのCORBAサーバントを起動するかどうかの設定。YES を設定すると、
//マネージャのCORBAサーバントが起動するため、リモートからマネージャの操作
//が可能になる。NO の場合には、CORBAサーバントが起動しないため、マネージャ
//のCORBA経由での操作はできなくなる。

- Designation: '' YES '' or '' NO ''
- Default value: YES
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト値: YES
//- 例:
 manager.corba_servant: YES

*** corba.master_manager

Master manager address and port number. The master manager can access by corbaloc format URL specification, but specifies the port number to be used at that time.
In addition, the slave manager interprets the master manager specified here as its own master manager, and accesses and negotiates the master manager at startup.
//マスターマネージャのアドレスとポート番号。マスターマネージャは、corbaloc 形式のURL指定でアクセス可能であるが、その際に使用するポート番号を指定する。
//また、スレーブマネージャは、ここで指定されたマスターマネージャを自身のマスターマネージャとして解釈、起動時にマスターマネージャにアクセスしネゴシエーションを行う。

- Specification: <host_name>: <port>
- Default: localhost: 2810
- Example:
//- 指定: <host_name>:<port>
//- デフォルト: localhost:2810
//- 例:
 corba.master_manager: localhost:2810

*** manager.shutdown_on_nortcs:

When there is no RTC on the process, that is, when the last one of the RTCs on the same process is terminated, it specifies whether to shut down the manager and terminate the process. In the case of YES, the process is terminated when there is no RTC. In the case of NO, both the manager and the process continue to move even when there is no RTC.
//プロセス上にRTCが一つもなくなった場合、すなわち同一プロセス上のRTCの最後の1つが終了した場合に、マネージャをシャットダウンし当該プロセスを終了させるかどうかを指定する。YES の場合には、RTCが一つもなくなった時点でプロセスが終了する。NOの場合は、RTCが一つもない状態でもマネージャ、プロセスともに動き続ける。

- Designation: ''YES'' or ''NO''
- Default: YES
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト: YES
//- 例:
 manager.shutdown_on_nortcs: YES

*** manager.shutdown_auto

Check the presence or absence of RTC in the process at regular time intervals, and if there is no RTC, set whether or not to shut down manager and process. If yes, if there is no RTC, the manager and process are automatically shut down.
If NO, the manager and processes continue to operate even if there is no RTC.
//プロセス内のRTCの有無を一定時間ごとに調べ、RTCがない場合には、マネージャおよびプロセスをシャットダウンするかどうかを設定する。YESの場合、RTCが一つもなければ、マネージャおよびプロセスは自動的にシャットダウンされる。
//NOの場合、RTCが一つもなくともマネージャおよびプロセスが動作し続ける。

The difference from manager.shutdown_on_nortcs is that the shutdown trigger,
While manager.shutdown_on_nortcs removes RTC,
manager.shutdown_auto is a point in time.
- Designation: ''YES'' or ''NO''
- Default: YES
- Example:
//manager.shutdown_on_nortcs との違いは、シャットダウンのトリガが、
//manager.shutdown_on_nortcs ではRTCの削除であるのに対して、
//manager.shutdown_auto は時間となっている点である。
//- 指定: ''YES'' or ''NO''
//- デフォルト: YES
//- 例:
 manager.shutdown_auto: YES

*** manager.auto_shutdown_duration

Period to check for the presence or absence of RTC in the process. The unit is seconds. If manager.shutdown_auto above is set to YES, check the presence or absence of RTC at the cycle set by this option.
//プロセス内のRTCの有無調べる周期。単位は秒。上記の manager.shutdown_auto が YES に設定されている場合、このオプションで設定された周期でRTCの有無を確認しにいく。

- Designation: Numeric value (Unit [s])
- Default: 10.0
- Example:
//- 指定: 数値 (単位[s])
//- デフォルト: 10.0
//- 例:
 manager.auto_shutdown_duration: 10.0


*** manager.cpu_affinity

This option binds manager processes to specific CPUs. Optional arguments must be one or more CPU IDs separated by commas. The CPU ID starts from 0, and the maximum value is the number of CPU cores minus one. If an incorrect CPU ID is specified, this process is set to use all CPUs.
//このオプションは、マネージャのプロセスを特定のCPUにバインドする。オプション引数は、カンマで区切られた1つ以上のCPU IDでなければならない。CPU IDは0から始まり、最大値はCPUコア数-1となる。もし不正なCPU IDが指定された場合、この//プロセスはすべてのCPUを利用するよう設定される。

- Specify: Specify the CPU ID to be bound by a comma
- Default: None
- Example:
//- 指定: バインドするCPU IDをカンマ区切りで指定
//- デフォルト: なし
//- 例:
 manager.cpu_affinity: 0,1


*** manager.supported_languages

The master manager activates the slave manager and the RTC in response to a request from a remote application or the like. Slave managers may be not only C++ language versions, but also Java and Python versions. This option sets the language supported by the master manager.
//マスターマネージャは、リモートアプリケーションなどからの要求に応じて、スレーブマネージャおよびRTCを起動する。スレーブマネージャは、C++言語版だけでなく、Java版、Python版などの可能性もある。このオプションでは、マスターマネージャがサポートする言語を設定する。

- Designation: Comma separated languages such as C++, Java, Python etc.
- Default: C++, Java, Python
- Example:
//- 指定: C++, Java, Python 等の言語をカンマ区切りで指定
//- デフォルト: C++, Java, Python
//- 例:
 manager.supported_languages: C++, Python, Java

*** manager.modules.<lang>.suffixes

Extension of RTC module for each language.
//言語ごとのRTCモジュールの拡張子。

- Designation: extension name of shared object
- Default:
- Windows: dll
- Linux, etc.: so
- Mac OS X: dylib
- Example
//- 指定: 共有オブジェクトの拡張子名
//- デフォルト:
//-- Windows: dll
//-- Linux等: so
//-- Mac OS X: dylib
//-例
 manager.modules.C++.suffixes: dll
 manager.modules.C++.suffixes: so
 manager.modules.C++.suffixes: dylib

*** manager.modules.<lang>.manager_cmd

Manager program name by language.

- Specify: Manager command name
- Default:
- C++: rtcd
- Python: rtcd_python
- Java: rtc_java
- Example
//言語ごとのマネージャプログラム名。
//- 指定: マネージャのコマンド名
//- デフォルト:
//-- C++: rtcd
//-- Python: rtcd_python
//-- Java: rtc_java
//-例
 manager.modules.C++.manager_cmd: rtcd
 manager.modules.Python.manager_cmd: rtcd_python
 manager.modules.Java.manager_cmd: rtcd_java

*** manager.modules.<lang>.profile_cmd

Profile acquisition command name for each language.

- Specify: Profile acquisition command name
- Default:
- C++: rtcprof
- Python: rtcprof_python
- Java: rtc_java
- Example
//言語ごとのプロファイル取得コマンド名。
//- 指定: プロファイル取得コマンド名
//- デフォルト:
//-- C++: rtcprof
//-- Python: rtcprof_python
//-- Java: rtc_java
//-例
 manager.modules.C++.profile_cmd: rtcprof
 manager.modules.Python.profile_cmd: rtcprof_python
 manager.modules.Java.profile_cmd: rtcprof_java

*** manager.modules.<lang>.load_paths
RTC module load path for each language.

- Specification: RTC module load path.
- Default:
- C++: ./
- Python: ./
- Java: ./
- Example

//言語ごとのRTCモジュールロードパス。
//- 指定: RTCモジュールロードパス。
//- デフォルト:
//-- C++: ./
//-- Python: ./
//-- Java: ./
//-例
 manager.modules.C++.profile_cmd: ./, /usr/share/OpenRTM-aist/components/cxx


//------------------------------------------------------------
** Settings related to CORBA
//** CORBAに関する設定

*** corba.args
Specify arguments to give to CORBA. CORBA has different command line options for each implementation. Normally the command line argument is given to the ORB_init () function which is the CORBA API, but this option passes the specified character string to this ORB_init () function.
//CORBAに与える引数を指定する。CORBA は実装毎に異なるコマンドラインオプションを持つ。通常コマンドライン引数は、CORBA の API である ORB_init() 関数に与えられるが、このオプションは指定された文字列をこの ORB_init() 関数に渡す。


- Specified: String
- Default: Empty string
- Example:
//- 指定: 文字列
//- デフォルト: 空文字列
//- 例:
 corba.args: -ORBInitialHost myhost -ORBInitialPort 8888

**** Designation example 1
//**** 指定例1

Be careful when sending image data etc. over the data port when the data size to be sent at once exceeds about 2 MB.
In omniORB, the size handled by giop (General Inter-ORB Protocol) is "2097152 B (2 MB)" by default, and if you try to send data exceeding this size, it is impossible to send correct data due to giop limitation.
It is possible to change the maximum size using the corba.args option. This specification must be specified in both OutPort and InPort.
//画像データなどをデータポートで送る際、1回に送信するデータサイズ約2MBを超える場合には注意が必要。
//omniORBでは、giop(General Inter-ORB Protocol)で扱えるサイズはデフォルトで"2097152B(2MB)"であり
//このサイズを超えるデータを送ろうとすると、giopの制限のため正しいデータを送ることができない。
//corba.args オプションを利用して、最大サイズを変更することが可能である。この指定は、OutPort、InPort両方にて指定する必要がある。

 corba.args: -ORBgiopMaxMsgSize 3145728 # Add this line
                               # Max size to 3M
// corba.args: -ORBgiopMaxMsgSize 3145728 # この行を追加
//                                        # Maxサイズを3Mに指定

In addition to specifying it in corba.args, this restriction can be relaxed by specifying environment variables as follows.
//なお、corba.args に指定する以外に、環境変数を以下のように指定することでこの制限を緩和することができる。

  export ORBgiopMaxMsgSize=3145728

- （reference）(omniORB configuration and API) http://omniorb.sourceforge.net/omni41/omniORB/omniORB004.html


*** corba.endpoint:
In CORBA, access is made by referring to the remote object called IOR, but in the IOR, usually only one set of the address and port number of the node where the object operates is described. When there are two or more network interfaces in the node on which OpenRTM is running, unintended addresses may be allocated as addresses of nodes included in the IOR.

In order to solve this, you can specify the address of the network used by CORBA with this option. '' Host address: port number '', but you can omit port number. However, '': (colon) '' can not be omitted.

//CORBAにおいては、リモートのオブジェクトのIORと呼ばれる参照によりアクセスするが、IORには当該オブジェクトが動作するノードのアドレスとポート番号が通常1セットのみ記述されている。OpenRTMが動作しているノードに2つ以上のネットワークインターフェースが存在する場合、IORに含まれるノードのアドレスとして意図しないアドレスが割り振られる場合がある。
//これを解消するために、本オプションでCORBAで利用するネットワークのアドレスを指定することができる。''ホストアドレス:ポート番号'' として指定するが、ポート番号は省略できる。ただし、'':(コロン)''は省略できない。

- Specification: <host_addr>: <port>
- Default: Empty string
- Example:
//- 指定: <host_addr>:<port>
//- デフォルト: 空文字
//- 例:
 corba.endpoint: 192.168.0.45:
 corba.endpoint: 192.168.0.45:8776
 corba.endpoints: myhost:      (use myhost and default port)
 corba.endpoints: :9876        (use default addr and port 9876)
 corba.endpoints: myhost:9876  (use myhost and port 9876)


*** corba.endpoints
An option that allows you to specify multiple endpoints of corba.endpoint. Depending on the implementation of the ORB, the IOR can contain multiple addresses. However, in JavaIDL which is the Java standard CORBA, when accessing the object via IOR specifying multiple addresses, problems such as slow operation are reported, so care is required.

You can specify multiple '' address: port '' pairs separated by '', (comma) ''. By specifying '' all '' as a special string, all addresses of the node can be included in the IOR.
//corba.endpoint のエンドポイントを複数指定することがきるオプション。ORBの実装によっては、IORに複数のアドレスを含めることができる。ただし、Java標準のCORBAであるJavaIDLにおいては、複数のアドレスを指定したIOR経由で当該オブジェクトにアクセスする場合、動作が遅くなるなど問題も報告されているので注意が必要である。

//''アドレス:ポート'' の対を '',(カンマ)''で区切り複数指定することができる。特別な文字列として ''all'' を指定することで、ノードのすべてのアドレスをIORに含めることもできる。
- Specification: <host_addr>: <port>, <host_addr>: <port>, ... or all
- Default: Empty string
- Example:
//- 指定: <host_addr>:<port>, <host_addr>:<port>, ... または all
//- デフォルト: 空文字
//- 例:
 corba.endpoints: 192.168.1.10:1111, 192.168.10.11:2222
 corba.endpoints: 192.168.1.10, 192.168.10.11
 corba.endpoints: all

corba.endpoints:

*** corba.nameservers
Option to specify a name server to register RTC etc. Multiple name servers can be specified with comma separated values. Especially when there is no name server at the specified address and port number, it does not cause an error in particular, and it registers the name of RTC only to existing name servers.
//RTC等を登録するネームサーバを指定するオプション。カンマ区切りで複数のネームサーバを指定することができる。指定したアドレスおよびポート番号にネームサーバがない場合でも特にエラーにはならず、存在するネームサーバにのみRTCの名前を登録する。

- Specification: <host_addr>: <port>, <host_addr>: <port>, ...
- Default: localhost
- Example:
//- 指定: <host_addr>:<port>, <host_addr>:<port>, ...
//- デフォルト: localhost
//- 例:
 corba.nameservers: openrtm.aist.go.jp:9876
 corba.nameservers: rtm0.aist.go.jp, rtm1.aist.go.jp, rtm2.aist.go.jp
 corba.nameservers: localhost

*** corba.nameservice.replace_endpoint

When there are multiple NICs in a node, there are cases where the address included in the IOR of the RTC registered on the name server is not appropriate. For example, if a node has two addresses of 192.168.0.10 and 192.168.1.10 and is registered on two name servers existing in 192.168.0.1 and 192.168.1.1, if 192.168.0.10 is the default on this node If it is a network interface to be used, the IOR registered in the above two name server name servers includes only 192.168.0.10. At this time, in the 192.168.1.0 network, the IOR on the name server is meaningless in which an unreachable address is described.
//ノードに複数のNICが存在する場合、ネームサーバ上に登録されるRTCのIORに含まれるアドレスが、適切でない場合が存在する。例えば、あるノードが192.168.0.10と192.168.1.10という2つのアドレスを持ち、192.168.0.1 および 192.168.1.1 に存在する2つのネームサーバ上に登録される場合、仮に192.168.0.10 が当該ノードでデフォルトで利用されるネットワークインターフェースだとすると、上記2つのネームサーバネームサーバに登録されるIORには、192.168.0.10 のみが含まれる。このとき、192.168.1.0 のネットワークではネームサーバ上のIORは到達不可能なアドレスが記載された無意味なものとなる。

If this option is specified, replace the address of the IOR registered in the 192.168.1.1 name server with 192.168.1.10 in the case like the above case.
//このオプションを指定すると、上記のケースのような場合、192.168.1.1 のネームサーバに登録されるIORのアドレスを 192.168.1.10 に置き換える。

However, by designating this option, although it is possible to use the profile etc. of the RTC from other nodes on the 192.168.1.0 network, it is impossible to connect the port etc.
//ただし、このオプション指定することによって、192.168.1.0 ネットワーク上の他のノードからは、当該RTCのプロファイル等を利用することはできるが、ポートの接続等は行うことはできない。

- Designation: ''YES'' or ''NO''
- Default: NO
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト: NO
//- 例:
 corba.nameservice.replace_endpoint: NO


*** corba.alternate_iiop_addresses
This option adds an alternate IIOP address to the IOR profile. The IOR can contain additional endpoints of servants (servers of CORBA objects). This is almost equivalent to the "corba.endpoints" option, except that it does not actually create endpoints.
(The "corba.endpoints" option tries to create the actual endpoint, otherwise an error will be returned.) This option simply adds the alternate IIOP endpoint address information to the IOR.
//このオプションは、代替IIOPアドレスをIORプロファイルに追加します。IORにはサーバント(CORBAオブジェクトのサーバ)の追加のエンドポイントを含めることができます。これは、"corba.endpoints"オプションとほぼ同等ですが、実際にエンドポイントを作成しない点が異なります。
//("corba.endpoints" オプションでは実際のエンドポイントを作ろうとし、できなければエラーが返されます。) このオプションは単に代替のIIOPエンドポイントアドレス情報をIORに追加します。

This option is used when RTC is placed inside NAT or router. In general, the RTC in the private network can not connect the RTC on the global network. However, if NAT and router port forwarding are properly configured, RTC on the global side can connect to RTC of private network.
//このオプションは、RTCをNATやルータの内部に配置する場合に使用します。一般的には、プライベートネットワーク内のRTCはグローバルネットワーク上のRTCを接続することはできません。しかしながら、NATやルータのポートフォワーディングが適切に設定されていればグローバル側のRTCはプライベートネットワークのRTCに接続することが可能です。

The setting is done as follows.
//設定は以下のように行います。

+ Configure NAT and router port forwarding appropriately.
- Here, port 2810 on the global side is referred to as an address on the private side
It is set to transfer to 2810 of the system.
+ Set rtc.conf on private side RTC as follows.
   corba.nameservers: my.global.nameserver.com <- Set up global name server
   corba.endpoints:: 2810 <- Port number of the component
   corba.alternate_iiop_addresses: w.x.y.z: 2810 <- IP address and port number on the global side of the router
+ Start global side RTC and private side RTC
//+ NATやルータのポートフォワーディングを適切に設定します。
//-- ここでは、グローバル側のポート2810をプライベート側のあるアドレスの2810へ転送するように設定します。
//+ プライベート側のRTCのrtc.confを以下のように設定します。
//  corba.nameservers: my.global.nameserver.com <- グローバル側のネームサーバを設定
//  corba.endpoints: :2810 <- コンポーネントのポート番号
//  corba.alternate_iiop_addresses: w.x.y.z:2810 <- ルータのグローバル側のIPアドレスとポート番号
//+ グローバル側のRTCとプライベート側のRTCを起動

In RTSystemEditor, access to private side RTC may become extremely slow. This is probably because it takes time to reach the private side because implementation of Java's IOR add profile function is not enough. By using rtshell etc., you can reduce the time it takes to connect. Also, even when it takes time to connect with RTSystemEditor or rtshell, the communication speed between the ports once connected is almost the same as normal.
//なお、RTSystemEditorでは、プライベート側のRTCへのアクセスが極端に遅くなる場合があります。これはJavaのIOR追加プロファイル機能の実装が十分でないため、プライベート側に到達するのに時間がかかるためと考えられます。rtshellなどを利用すると、接続にかかる時間を減らすことができます。また、RTSystemEditorやrtshellでの接続に時間がかかった場合でも、一旦接続したポート間の通信速度は通常とほとんど変わりません。

- Specified: address: port
- Default: Unspecified
- Example:
//- 指定: address:port
//- デフォルト: 未指定
//- 例:
 corba.alternate_iiop_addresses: addr:port


//------------------------------------------------------------
** Settings related to name service
//** ネームサービスに関する設定

*** naming.enable

This option enables / disables the function related to the naming service. If YES is specified, RTC reference is registered in the name service. If NO, registration of RTC's reference to the name service is not done.
//このオプションはネーミングサービスに関する機能の有効・無効を切り替える。YESを指定した場合、ネームサービスへRTCの参照を登録する。NOの場合、ネームサービスへのRTCの参照の登録は行われない。

- Designation: 'YES'' or ''NO''
- Default value: YES
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト値: YES
//- 例:
 manager.is_master: NO

*** naming.type
This option specifies the type of name service. Currently it only supports corba.
- Specified: Name service type
- Default value: corba
- Example:
//このオプションはネームサービスのタイプを指定する。現在のところはcorbaのみをサポートしている。
//- 指定: ネームサービスのタイプ
//- デフォルト値: corba
//- 例:
 naming.type: corba

*** naming.formats

Specify the format for registering RTC on the name server. You can use specifiers that begin with ''%'' below. The delimiter of the name hierarchy is ''/'', and the delimiter of name and kind (kind) is ''.''.
//RTCをネームサーバに登録する際のフォーマットを指定する。以下の ''%''で始まる指定子を利用することができる。名前階層のデリミタは ''/'' であり、名前と種類(kind)のデリミタは ''.'' である。
|%n| RTC instance name |
|%t| RTC type name |
|%m| RTC module name |
|%v| RTC version |
|%V| RTC vendor name |
|%c| RTC category name |
|%h| Host name |
|%M| Manager name |
|%p| process ID |
//| %n | RTCのインスタンス名 |
//| %t | RTCのタイプ名 |
//| %m | RTCのモジュール名 |
//| %v | RTCのバージョン |
//| %V | RTCのベンダ名 |
//| %c | RTCのカテゴリ名 |
//| %h | ホスト名 |
//| %M | マネージャ名 |
|// %p | プロセスID |

- Specification:/<name>.<Kind>/<name>.<Kind>/...
- Default value:% h.host_cxt /% n.mgr
- Example:
//- 指定: /<name>.<kind>/<name>.<kind>/...
//- デフォルト値: %h.host_cxt/%n.mgr
//- 例:
 naming.formats: %h.host/%n.rtc

*** naming.update.enable
Registration of the RTC to the name server is usually done at instance creation time. Therefore, the name and reference of the RTC are not registered in the name server started after RTC generation. Specifying this option periodically checks the name server, and if the name server is confirmed to start up, register the name and reference again.
//RTCのネームサーバへの登録は通常インスタンス生成時に行われる。したがって、RTCの生成以降に起動されたネームサーバには、当該RTCの名前と参照は登録されない。このオプションを指定することで、定期的にネームサーバを確認し、ネームサーバの起動が確認された場合、改めて名前と参照を登録する。

- Designation: ''YES'' or ''NO''
- Default value: YES
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト値: YES
//- 例:
 naming.update.enable: YES

*** naming.update.interval
If naming.update.enable is YES, specify the period for checking and re-registering the name server.
//naming.update.enable が YES の場合、ネームサーバの確認および再登録を行う周期を指定する。

- Designate: Specify the registration period with [s].
- Default value: 10.0
- Example:
//- 指定: 登録周期を [s] で指定する。
//- デフォルト値: 10.0
//- 例:
 naming.update.interval: 10.0

*** naming.update.rebind

If you specify YES for this option, even if the name is already deleted on the name server whose name and reference are already registered, registration is done again.
//このオプションに YES を指定すると、すでに名前と参照が登録されているネームサーバ上で名前が削除されるなどした場合にもの、再度登録を行う。

- Designation: ''YES'' or ''NO''
- Default value:
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト値: NO
//- 例:
 naming.update.rebind: NO

//============================================================
// Module management
//============================================================
** Settings related to module loading
//** モジュールロードに関する設定

*** manager.modules.load_path

The manager searches modules from the search path list specified by this option. Paths are enumerated by comma separators. Path delimiters are On UNIX, it is ''/'', Windows ''\\''.
//マネージャはこのオプションで指定されたサーチパスリストからモジュールを探索する。パスはカンマ区切りで列挙する。パスのデリミタは、UNIXでは''/''、Windows ''\\''である。

- Designation: /dir_name 0/dir_name1/...,/dir_name0/dir_name1/...
- Default value: ./
- Example:
//- 指定: /dir_name0/dir_name1/..., /dir_name0/dir_name1/...
//- デフォルト値: ./
//- 例:
 manager.modules.load_path: C:/Program Files/OpenRTM-aist,  \
                            C:\\Program Files\\OpenRTM-aist
 manager.modules.load_path: /usr/lib, /usr/local/lib,       \
                            /usr/local/lib/OpenRTM-aist/libs

*** manager.modules.preload:

The manager can load the loadable module beforehand at startup. Find the loadable module specified with this option from the search path specified by ''manager.modules.load_path''.
If YES is specified in '' manager.modules.abs_path_allowed '', loadable modules can also be specified as absolute paths.
//マネージャは起動時に予めローダブルモジュールをロードすることができる。このオプションで指定されたローダブルモジュールを、''manager.modules.load_path'' で指定されたサーチパスから探し出す。
//もし、''manager.modules.abs_path_allowed'' で YES が指定されていれば、ローダブルモジュールを絶対パスで指定することもできる。

- Specification: <module_name> .dll, <module_name> .dll, ...
- Default value: empty
- Example:
//- 指定: <module_name>.dll, <module_name>.dll, ...
//- デフォルト値: 空
//- 例:
 manager.modules.preload: ConsoleIn.dll, ConsoleOut.dll
 manager.modules.preload: ConsoleIn.so, ConsoleOut.so
 
 manager.modules.abs_path_allowed: YES
 manager.modules.preload: /usr/lib/OpenRTM-aist/ConsoleIn.so

*** manager.modules.abs_path_allowed

Absolute path designation permission flag of the module. If this option is YES, the entertainment path specification of the module is permitted.
//モジュールの絶対パス指定許可フラグ。もしこのオプションがYESの場合、モジュールの接待パス指定が許可される。

- Designation: ''YES'' or ''NO''
- Default value: YES
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト値: YES
//- 例:
manager.modules.abs_path_allowed: YES

// #
// # The following options are not implemented yet. 
// #
// # manager.modules.config_ext:
// # manager.modules.config_path:
// # manager.modules.detect_loadable:
// # manager.modules.init_func_suffix:
// # manager.modules.init_func_prefix:
// # manager.modules.download_allowed:
// # manager.modules.download_dir:
// # manager.modules.download_cleanup:
// #

*** manager.components.precreate
This option specifies the component name (module name) to be started at the start of the manager. The factory of the component specified here needs to be registered, such as manager.module.preload or statically linked to the manager.
//このオプションはマネージャのスタート時に起動するコンポーネント名 (モジュール名) を指定する。ここで指定されるコンポーネントのファクトリは manager.module.preload または、マネージャに静的にリンクするなどして、登録されている必要がある。
- Specification: <module_name>, <module_name>, ...
- Default value: empty
- Example:
//- 指定: <module_name>, <module_name>, ...
//- デフォルト値: 空
//- 例:
 manager.components.precreate: ConsoleIn, ConsoleOut, SeqIn, SeqOut


//============================================================
// Logger configurations
//============================================================
** Logger relationship setting
//** ロガー関係の設定

*** logger.enable
Designation to enable / disable logger.

- Designation: '' YES '' or '' NO ''
- Default value: YES
- Example:
//ロガーの有効化・無効化の指定。
//- 指定: ''YES'' or ''NO''
//- デフォルト値: YES
//- 例:
 logger.enable: YES

*** logger.file_name
Specify the log file name. You can also output to multiple files separated by commas. The specifier% p to replace the process ID is available. Also, if the file name is' stdout '', the log is outputted to the standard output.
//ログファイル名の指定。カンマ区切りで複数のファイルへ出力することもできる。プロセスIDを置き換える指定子 %p が利用可能。また、ファイル名''stdout'' とするとログを標準出力する。
- Specify: File name including path
- Default value: ./rtc%p.log
- Example:
//- 指定: パスを含むファイル名
//- デフォルト値: ./rtc%p.log
//- 例:
 logger.file_name: /tmp/rtc%p.log
 logger.file_name: /tmp/rtc%p.log, stdout

*** logger.date_format
Date / time format specification in the log. The format specifier similar to strftime (3) below can be used. If you do not specify a time, specify ''No'' or ''Disable''.
//ログに記載する日付・時刻のフォーマット指定。以下の strftime(3) に似たフォーマット指定子を利用可能。時刻を指定しない場合、''No'' または''Disable'' を指定する。

| %a | abbreviated weekday name |
| %A | full weekday name |
| %b | abbreviated month name |
| %B | full month name |
| %c | the standard date and time string |
| %d | day of the month, as a number (1-31) |
| %H | hour, 24 hour format (0-23) |
| %I | hour, 12 hour format (1-12) |
| %j | day of the year, as a number (1-366) |
| %m | month as a number (1-12). &br; Note: some versions of Microsoft Visual C++ may use values that range from 0-11. |
| %M | minute as a number (0-59) |
| %p | locale's equivalent of AM or PM |
| %S | second as a number (0-59) |
| %U | week of the year, sunday as the first day |
| %w | weekday as a decimal (0-6, sunday=0) |
| %W | week of the year, monday as the first day |
| %x | standard date string |
| %X | standard time string |
| %y | year in decimal, without the century (0-99) |
| %Y | year in decimal, with the century |
| %Z | time zone name |
| %% | a percent sign |

- Specification:/<name>.<Kind>/<name>.<Kind>/...
- Default value:% b% d% H:% M:% S
- Example:
//- 指定: /<name>.<kind>/<name>.<kind>/...
//- デフォルト値: %b %d %H:%M:%S
//- 例:
 logger.date_format: No
 logger.date_format: Disable
 logger.date_format: [%Y-%m-%dT%H.%M.%S%Z]     // W3C standard format
 logger.date_format: [%b %d %H:%M:%S]          // Syslog format
 logger.date_format: [%a %b %d %Y %H:%M:%S %Z] // RFC2822 format
 logger.date_format: [%a %b %d %H:%M:%S %Z %Y] // data command format
 logger.date_format: [%Y-%m-%d %H.%M.%S]

*** logger.log_level
The following log levels can be specified.
//以下のログレベルを指定可能。

- SILENT
- ERROR
- WARN
//- NORMAL
- INFO
- DEBUG
- TRACE
- VERBOSE
- PARANOID

Levels of log messages actually recorded in the log when specifying the log level to be written are as follows.
//書くログレベルを指定した際に実際にログに記録されるログメッセージのレベルは以下の通り。

| SILENT   | completely silent |
| ERROR    | includes (ERROR) |
| WARN     | includes (ERROR, WARN) |
| INFO     | includes (ERROR, WARN, INFO) |
//| NORMAL   | includes (ERROR, WARN, INFO, NORMAL) |
| DEBUG    | includes (ERROR, WARN, INFO, DEBUG) |
| TRACE    | includes (ERROR, WARN, INFO, DEBUG, TRACE) |
| VERBOSE  | includes (ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE) |
| PARANOID | includes (ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARA) |
//| DEBUG    | includes (ERROR, WARN, INFO, NORMAL, DEBUG) |
//| TRACE    | includes (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE) |
//| VERBOSE  | includes (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE) |
//| PARANOID | includes (ERROR, WARN, INFO, NORMAL, DEBUG, TRACE, VERBOSE, PARA) |

Each ''TRACE'', ''VERBOSE'', ''PARANOID'' log level usually produces a huge log file. If ''PARANOID'' is specified, the log format may be lost.
//''TRACE'', ''VERBOSE'', ''PARANOID'' の各ログレベルは通常巨大なログファイルを生成します。''PARANOID''を指定すると、ログフォーマットが崩れる場合があります。

- designation: (SILENT|ERROR|WARN|INFO|DEBUG|TRACE|VERBOSE|PARANOID)
//- 指定: (SILENT|ERROR|WARN|NORMAL|INFO|DEBUG|TRACE|VERBOSE|PARANOID)
- Default value: INFO
//- デフォルト値: NORMAL
- Example:
 logger.log_level: DEBUG

//============================================================
// Timer configuration
//============================================================
** Timer settings
//** タイマに関する設定

*** timer.enable
Enable/disable the timer function. When the timer is invalidated, the function using the timer, for example, periodic checking and reregistration of the name server, becomes invalid.
//タイマ機能を有効/無効にする。タイマを無効にするとタイマを利用している機能、例えばネームサーバの定期的確認と再登録等が無効になる。

- Designation: ''YES'' or ''NO''
- Default value: YES
- Example:
//- 指定: ''YES'' or ''NO''
//- デフォルト値: YES
//- 例:
 timer.enable: YES

*** timer.tick
Specify the accuracy of the timer.
//タイマの精度を指定する。
- Designate: Specify the accuracy of the timer with [s].
- Default value: 0.1 [s], (= 100 ms)
- Example:
//- 指定: タイマの精度を [s] で指定する。
//- デフォルト値: 0.1 [s], (= 100ms)
//- 例:
 timer.tick: 1.0

//============================================================
// Execution context settings
//============================================================

*** exec_cxt.periodic.type
The type of default execution context.
//デフォルトの実行コンテキストのタイプ。

- Specified: Default execution context name
- Default value: PeriodicExecutionContext
- Example:
//- 指定: デフォルトの実行コンテキスト名
//- デフォルト値: PeriodicExecutionContext
//- 例:
 exec_cxt.periodic.type: PeriodicExecutionContext
 exec_cxt.periodic.type: ArtExecutionContext

*** exec_cxt.periodic.rate
The period of the default execution context.
//デフォルトの実行コンテキストの周期。
- Specified: Specify the default execution context period in [Hz]
- Default value: 1000
- Example:
//- 指定: デフォルトの実行コンテキスト周期を [Hz] で指定する
//- デフォルト値: 1000
//- 例:
 exec_cxt.periodic.rate: 100