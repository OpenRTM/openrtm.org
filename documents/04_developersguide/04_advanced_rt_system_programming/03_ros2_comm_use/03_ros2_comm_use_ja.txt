//ROS2通信機能の利用
#contents

** C++版
*** Windows

Visual Studio 2017がインストール済みの環境で確認してください。

**** Chocolateyのインストール
以下のページの指示に従いインストールします。

- https://chocolatey.org/install#installing-chocolatey

**** Python3のインストール
以下のコマンドでインストールします。

 > choco install -y python

**** OpenSSLのインストール
以下から''Win64OpenSSL-1_0_2r.exe''を入手して、それを実行してインストールします。

- https://slproweb.com/products/Win32OpenSSL.html

以下の環境変数を設定します。

|OPENSSL_CONF|C:\OpenSSL-Win64\bin\openssl.cfg|

環境変数PATHに''C:\OpenSSL-Win64\bin''を追加します。

**** asio、eigen、tinyxml、tinyxml-usestl、log4cxxのインストール
以下のページからNuGetパッケージ(''.nupkg'')ファイルをダウンロードしてください。

- https://github.com/ros2/choco-packages/releases

以下のコマンドでインストールします。依存するNugetパッケージが増える場合もあるようなので、適宜変更してください。

 > choco install -y -s <'''ダウンロードしたパス'''> asio eigen tinyxml-usestl tinyxml2 log4cxx


**** Python用パッケージのインストール
以下のコマンドでインストールします。

 > python -m pip install -U catkin_pkg empy pyparsing pyyaml setuptools

**** ROS2のインストール
以下のページから''ros2-crystal-20190314-windows-release-amd64.zip''をダウンロードします。

- https://github.com/ros2/ros2/releases

''C:\dev\ros2''等に展開して完了です。

**** OpenRTM-aistのビルド

CMake実行前にROS2の環境を設定するスクリプトを実行します。

 > call C:\dev\ros2\local_setup.bat

CMake実行時に''FASTRTPS_ENABLE''、''ROS2_ENABLE''のオプションをONにします。

 > cmake  -DORB_ROOT=C:/workspace/omniORB-4.2.3-win64-vc14 -DCORBA=omniORB -G "Visual Studio 15 2017" -A x64 -DFASTRTPS_ENABLE=ON -DROS2_ENABLE=ON ..

その他の手順は通常と同じです。

-  [[OpenRTM-aistのビルド手順>/ja/node/6339]]

適当な場所にインストールしてください。

インストールするディレクトリは''CMAKE_INSTALL_PREFIX''のオプションで設定します。

 > cmake .. -DCMAKE_INSTALL_PREFIX=C:/workspace/OpenRTM-aist/build_omni/install
 > cmake --build . --config Release --target install

**** 動作確認

''<'''インストールしたパス'''>\2.0.0\Components\C++\Examples\vc14''のサンプルコンポーネントを実行します。

以下の内容のrtc.confを作成してください。


 manager.modules.load_path: {インストールしたパス}\\2.0.0\\ext\\transport
 manager.modules.preload: FastRTPSTransport.dll, ROS2Transport.dll
 manager.components.preconnect: ConsoleOut0.in?interface_type=fast-rtps&marshaling_type=ros2:std_msgs/Float32&fastrtps.topic=chatter, ConsoleIn0.out?interface_type=fast-rtps&marshaling_type=ros2:std_msgs/Float32&fastrtps.topic=chatter
 manager.components.preactivation: ConsoleOut0, ConsoleIn0

: manager.module.load_path | シリアライザ用モジュール(FastRTPSTransport.dllとROS2Transport.dll)が置かれている場所
: manager.modules.preload | シリアライザ用モジュールを読み込む順番で指定
: manager.components.preconnect | コネクタ生成時の設定を記述します。interface_type(インターフェース型)に''fast-rtps''を、marshaling_type(マーシャリング型)に対応シリアライザ名を、fastrtps.topic(トピック)に適当な任意の名前を記述します。

ROS/ROS2用のシリアライザと対応するROS/ROS2メッセージ型の関係を以下のリンクで示します。

- [[シリアライザ名とROS/ROS2メッセージ型>/ja/node/6585]]

コネクタの生成は''manager.components.preconnect''オプションにより設定します。
この例では''ConsoleOut0''コンポーネントの''in''のポート、''ConsoleIn0''コンポーネントの''out''のポートにそれぞれコネクタを生成しています。

実行前に環境変数PATHに以下を追加する必要があります。

- <'''インストールしたパス'''>\2.0.0\bin\vc14
- <'''インストールしたパス'''>\2.0.0\omniORB\4.2.3_vc14\bin\x86_win32
- C:\dev\ros2\bin
- C:\ProgramData\chocolatey\lib\tinyxml2\lib
- C:\ProgramData\chocolatey\lib\log4cxx\lib



''ConsoleInComp.exe''、''ConsoleOutComp.exe''を実行すると通信ができるようになります。


**** 接続時のオプション

接続時に設定可能な項目は以下の通りです。

***** FastRTPs

|オプション名|意味|デフォルト値|
|fastrtps.QoSXML|QoSを設定するためのXMLファイル名||
|marshaling_type|シリアライザの種類|corba|
|fastrtps.topic|DDSトピック名|chatter|
|fastrtps.subscriber.name|サブスクライバー名(XMLファイルを読み込んだ場合に個別にQoSを設定可能)||
|fastrtps.publisher.name|パブリッシャー名(XMLファイルを読み込んだ場合に個別にQoSを設定可能)||

***** OpenSplice

|オプション名|意味|デフォルト値|
|marshaling_type|シリアライザの種類|corba|
|opensplice.topic|DDSトピック名|chatter|


*** Ubuntu
**** ROS2のインストール
以下のコマンドでインストールします。

 $ curl http://repo.ros2.org/repos.key | sudo apt-key add -
 $ sudo sh -c 'echo "deb [arch=amd64,arm64] http://repo.ros2.org/ubuntu/main $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'
 $ export ROS_DISTRO=crystal
 $ sudo apt update
 $ sudo apt install ros-${ROS_DISTRO}-ros-core

ROS2用にbashの設定を以下のように行います。(次回以降のbash起動時の設定と、現在実行中のbashの設定を行います。)

 echo "source /opt/ros/crystal/setup.bash" >> ~/.bashrc
 source ~/.bashrc



**** OpenRTM-aistのビルド

CMake実行時に''FASTRTPS_ENABLE''、''ROS2_ENABLE''のオプションをONにします。

 $ cmake -DCORBA=omniORB -DCMAKE_BUILD_TYPE=Release -DFASTRTPS_ENABLE=ON -DROS2_ENABLE=ON ..

その他の手順は通常と同じです。

-  [[OpenRTM-aistのビルド手順>/ja/node/6339]]

ビルド後にインストールしてください。

 $ cmake --build . --target install

**** 動作確認
以下のrtc.confを作成します。

 manager.modules.load_path: /usr/local/lib/openrtm-2.0/transport/
 manager.modules.preload: FastRTPSTransport.so, ROS2Transport.so
 manager.components.preconnect: ConsoleOut0.in?interface_type=fast-rtps&marshaling_type=ros2:std_msgs/Float32&fastrtps.topic=chatter, ConsoleIn0.out?interface_type=fast-rtps&marshaling_type=ros2:std_msgs/Float32&fastrtps.topic=chatter
 manager.components.preactivation: ConsoleOut0, ConsoleIn0

: manager.module.load_path | シリアライザ用モジュール(FastRTPSTransport.soとROS2Transport.so)が置かれている場所
: manager.modules.preload | シリアライザ用モジュールを読み込む順番で指定
: manager.components.preconnect | コネクタ生成時の設定を記述します。interface_type(インターフェース型)に''fast-rtps''を、marshaling_type(マーシャリング型)に対応シリアライザ名を、fastrtps.topic(トピック)に適当な任意の名前を記述します。

OpenRTM-aistのシリアライザが対応しているメッセージ型を以下に示します。

- [[シリアライザ名とROS/ROS2メッセージ型>/ja/node/6585]]

RTCを起動して動作確認します。

それぞれ別のターミナルから起動してください。

 /usr/local/share/openrtm-2.0/components/c++/examples/ConsoleInComp

 /usr/local/share/openrtm-2.0/components/c++/examples/ConsoleOutComp

** Python版
*** Windows
C++版と同じ手順でROS2をインストールしてください。

**** OpenRTM-aistのインストール
OpenRTM-aist 1.2等をインストーラーでインストールしておいてください。
OpenRTM-aist Python版のソースコードを入手してください。

- https://github.com/OpenRTM/OpenRTM-aist-Python

以下のコマンドでOpenRTM-aist Python版をインストールしてください。

 python setup.py build
 python setup.py install

**** 動作確認
動作前に以下のコマンドを実行してください。

  call C:\dev\ros2\setup.bat

以下のようなrtc.confを作成し、''ROS2Transport.py''をロード後、インターフェース型に''opensplice''を指定して起動します。

 manager.modules.load_path: C:\\Python37\\Lib\\site-packages\\OpenRTM_aist\\ext\\transport\\ROS2Transport
 manager.modules.preload: ROS2Transport.py
 manager.components.preconnect: ConsoleOut0.in?interface_type=ros2&marshaling_type=ros2:std_msgs/Float32&ros2.topic=chatter, ConsoleIn0.out?interface_type=ros2&marshaling_type=ros2:std_msgs/Float32&ros2.topic=chatter

: manager.module.load_path | シリアライザ用モジュール(ROS2Transport.py)が置かれている場所
: manager.modules.preload | シリアライザ用モジュールを読み込む順番で指定
: manager.components.preconnect | コネクタ生成時の設定を記述します。interface_type(インターフェース型)に''ros2''を、marshaling_type(マーシャリング型)に対応シリアライザ名を、ros2.topic(トピック)に適当な任意の名前を記述します。



*** Ubuntu
**** ROS2のインストール
以下のコマンドでインストールします。

 $ curl http://repo.ros2.org/repos.key | sudo apt-key add -
 $ sudo sh -c 'echo "deb [arch=amd64,arm64] http://repo.ros2.org/ubuntu/main $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'
 $ export ROS_DISTRO=crystal
 $ sudo apt update
 $ sudo apt install ros-${ROS_DISTRO}-desktop

ROS2の環境設定のbashを実行するようにします。

 $ echo "source /opt/ros/crystal/setup.bash" >> ~/.bashrc
 $ source ~/.bashrc

**** omniORBpy
執筆中

**** OpenRTM-aistのインストール
OpenRTM-aist Python版のソースコードを入手してください。

- https://github.com/OpenRTM/OpenRTM-aist-Python

以下のコマンドでOpenRTM-aist Python版をビルド/インストールしてください。

 $ python setup.py build
 $ python setup.py install

**** 動作確認
ros2のsetup.bashを実行するとPYTHONPATHが上書きされるようなので以下のコマンドを実行する。

 $ export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.6/site-packages
 $ export PATH=$PATH:/usr/local/lib/python3.6/site-packages/

omniORBpyがインストールされているディレクトリにあわせて変更してください。

以下のようなrtc.confを作成し、''ROS2Transport.py''をロードし、インターフェース型に''ros2''、シリアライザに''ros2:std_msgs/Float32''を指定して起動するように指定します。

 manager.modules.load_path: /usr/local/lib/python3.6/site-packages/OpenRTM_aist/ext/transport/ROS2Transport/
 manager.modules.preload: ROS2Transport.py
 manager.components.preconnect: ConsoleOut0.in?interface_type=ros2&marshaling_type=ros2:std_msgs/Float32&ros2.topic=chatter, ConsoleIn0.out?interface_type=ros2&marshaling_type=ros2:std_msgs/Float32&ros2.topic=chatter

OpenRTM-aistのシリアライザが対応しているメッセージ型を以下に示します。

- [[シリアライザ名とROS/ROS2メッセージ型>/ja/node/6585]]


以下のコマンドでRTCを起動して動作確認してください。

 $ python /usr/local/share/openrtm-2.0/components/python/SimpleIO/ConsoleIn.py

 $ python /usr/local/share/openrtm-2.0/components/python/SimpleIO/ConsoleOut.py


**** 接続時のオプション

接続時に設定可能な項目は以下の通りです。

|オプション名|意味|デフォルト値|
|marshaling_type|シリアライザの種類|ros2:std_msgs/Float32|
|ros2.topic|DDSトピック名|chatter|
